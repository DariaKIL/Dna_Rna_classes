class Rna:
    nucleotides = {'A': 'U', 'U': 'A', 'G': 'C', 'C': 'G'}
    def __init__(self, seq):
        self.seq = seq.upper()
        for base in self.seq:
            if base not in self.nucleotides:
                raise ValueError('Warning! Enter only RNA sequence!')
    def gc (self, seq):
        return (self.seq.count('C') + self.seq.count('G'))/len(seq)*100
    def reverse_complement(self, seq):
        bases = list(self.seq)
        bases.reverse()
        bases = [self.nucleotides[base] for base in bases]
        return ''.join(bases)
class Dna(Rna):
    nucleotides = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    def __init__(self, seq):
        self.seq = seq.upper()
        for base in self.seq:
            if base not in self.nucleotides:
                raise ValueError('Warning! Enter only DNA sequence!')

    def transcribe(self, seq):
        replace = {'A': 'U', 'C': 'G', 'G': 'C', 'T': 'A'}
        bases = list(self.seq)
        bases = [replace[base] for base in bases]
        return ''.join(bases)
